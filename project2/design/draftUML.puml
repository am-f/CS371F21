@startuml
abstract class vm.Memory {
# long frequency
# PhyMemory ram
+ <<Create>> Memory(PhyMemory)
# PhyMemory getPhyMemory()
+ {abstract}void write(int,byte)
+ {abstract}byte read(int)
# {abstract}void sync_to_disk()
+ void startup()
+ void shutdown()
}
class vm.Policy {
# LinkedList<Integer> usedFramesByVPN
# LinkedList<Integer> availableFramesByPFN
# <<Create>> Policy(int)
# int pfnOfAvailPage()
# int vpnOfPageToEvict()
}
class vm.VirtMemory {
# int writeCount
# MyPageTable pt
# int PAGE_SIZE
# Policy frameTracking
+ <<Create>> VirtMemory()
+ <<Create>> VirtMemory(int,int)
# int vaToPaAddressTranslation(int)
# int paToVaAddressTranslation(int)
+ void write(int,byte)
+ byte read(int)
# void sync_to_disk()
# void loadPage(int)
# void evictPage(int)
# void handlePageFault(int)
}
class vm.MyPageTable {
- {static} int INITIAL_SIZE
- PageTableEntry[] buckets
- int numPTEs
+ <<Create>> MyPageTable(int)
- int hashCode(int)
# int getPFN(int)
# void addPTE(PageTableEntry)
# void removePTE(PageTableEntry)
}
class vm.MyPageTable.PageTableEntry {
~ int vpn
~ int pfn
~ boolean dirty
~ PageTableEntry next
~ <<Create>> PageTableEntry(int,int)
}


vm.Memory <|-- vm.VirtMemory
vm.MyPageTable +.. vm.MyPageTable.PageTableEntry
@enduml